#!/usr/bin/env python3
import asyncio
import mido
import midi
import time
import message
from message import Event, as_hex_string

target_name = "WINE midi driver"
client_name = 'TonePrintCapture'
port_name = 'midi'
backend = mido.Backend()
midi_out = backend.open_output(port_name, client_name=client_name)
preset:list = []

def respond_to_probe():
    midi_out.send(message.make([0x04, 0x00, 0x42, 0x06, 0x00, 0x00]))
    midi_out.send(message.make([0x06, 0x78, 0x7F, 0x7F, 0x7F, 0x7F]))
    midi_out.send(message.make([0x26, 0x00, 0x00]))
    midi_out.send(message.make([0x0E, 0x00, 0x00, 0x01, 0x00, 0x00]))
    midi_out.send(message.make([0x0F, 0x00, 0x55, 0x49, 0x3A, 0x0A, 0x00]))
    midi_out.send(message.make([0x0F, 0x00, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x00, 0x64, 0x73, 0x65, 0x64, 0x0A, 0x00]))
    
    midi_out.send(message.make([0x0F, 0x00, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3A, 0x00, 0x20, 0x35, 0x0A, 0x00]))
    midi_out.send(message.make([0x08, 0x11, 0x21, 0x02, 0x62, 0x01, 0x65, 0x01, 0x55, 0x00, 0x01, 0x58, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    midi_out.send(message.make([0x08, 0x11, 0x21, 0x02, 0x62, 0x01, 0x65, 0x01, 0x55, 0x00, 0x01, 0x58, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    midi_out.send(message.make([0x14, 0x78, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1D, 0x7B, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40]))
    midi_out.send(message.make([0x1D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x79, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x09]))
    
def respond_to_state_request():
    print('responding with state')
    midi_out.send(message.make([0x06, 0x78, 0x7f, 0x7f, 0x7f, 0x7f]))
    midi_out.send(message.make([0x26, 0x00, 0x00]))
    midi_out.send(message.make([0x08, 0x11, 0x4B, 0x03, 0x32, 0x01, 0x50, 0x01, 0x55, 0x00, 0x01, 0x59, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    # midi_out.send(message.make([0x08, 0x11, 0x4B, 0x03, 0x32, 0x01, 0x50, 0x01, 0x55, 0x00, 0x01, 0x59, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    midi_out.send(message.make([0x14, 0x78, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1D, 0x7B, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40]))
    midi_out.send(message.make([0x1D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0C, 0x67, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x77]))

def respond_to_query():
    print('responding to query')
    midi_out.send(message.make([0x26, 0x00, 0x00]))
    midi_out.send(message.make([0x08, 0x11, 0x4B, 0x03, 0x32, 0x01, 0x50, 0x01, 0x55, 0x00, 0x01, 0x59, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    midi_out.send(message.make([0x14, 0x78, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1D, 0x7B, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40]))
    midi_out.send(message.make([0x1D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0C, 0x67, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x77]))
    midi_out.send(message.make([0x26, 0x00, 0x00]))
    midi_out.send(message.make([0x08, 0x11, 0x4B, 0x03, 0x32, 0x01, 0x50, 0x01, 0x55, 0x00, 0x01, 0x59, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6C, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00]))
    
def on_message(data:mido.Message):
    global preset
    type, body = message.parse(data)
    now = time.time()

    if type is None:
        return
    
    print(f'{now} - {as_hex_string(data.bytes())}')

    match type:
        case Event.probe.value:
            respond_to_probe()
        case Event.ping.value: # | Event.query.value:
            respond_to_state_request()
        case Event.query.value:
            respond_to_query()
            
            # if len(preset) == message.preset_size:
            #     print(f'preset complete - {len(preset)} commands')
            # elif len(preset) < 3:
            #     for command in preset:
            #         print(f'{as_hex(command)}')
            # elif len(preset):
            #     print(f'incomplete preset - only got {len(preset)} - try again please')
            # else:
            #     return
            preset = []
        case Event.start_preset.value:
            print('preset start')
            preset = []
        case Event.preset.value:
            preset.append(body)
        case _:
            pass

midi_in = backend.open_input(port_name, client_name=client_name, callback=on_message)

class Data:
    def __init__(self) -> None:
        self.messages = {}
    
async def main():
    data = Data()
    midi.connect(backend, client_name, target_name)
    midi.connect(backend, target_name, client_name)    
    
    while True:
        await asyncio.sleep(1.0)

try:
    asyncio.run(main())  
except KeyboardInterrupt:
    pass