#include "midi.hpp"
#include "toneprint.hpp"

#include <algorithm>
#include <array>
#include <cstdio>
#include <chrono>
#include <fmt/base.h>
#include <fmt/format.h>
#include <initializer_list>
#include <libremidi/defaults.hpp>
#include <libremidi/input_configuration.hpp>
#include <libremidi/libremidi.hpp>
#include <libremidi/observer_configuration.hpp>
#include <thread>

using namespace libremidi;
using namespace std::chrono_literals;
using namespace toneprint;

const auto target_name = "WINE midi driver";
const auto client_name = "toneprint-capture";

auto find_target_port( const auto &ports )
{
    for( auto &port : ports )
    {
        if( port.device_name == target_name )
        {
            fmt::println( "port {} - {} - {}", port.port_name, port.device_name, port.display_name );
            return port;
        }

    }

    return ports.at( 0 );
}

auto find_input()
{
    observer observer( { .track_virtual = true } );
    auto ports = observer.get_input_ports();
    return find_target_port( ports );
}

auto find_output()
{
    observer observer( { .track_virtual = true } );
    auto ports = observer.get_output_ports();
    return find_target_port( ports );
}

void send( midi_out &output, const libremidi::message &message )
{
    output.send_message( message );
    std::this_thread::sleep_for( 10ms );
}

void respond_to_probe( midi_out &output )
{
    fmt::println( "responding to probe 0x09" );
    send( output, { 0x26, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x59, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x14, 0x78, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1d, 0x7b, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40 } );
    send( output, { 0x1d, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x15, 0x25, 0x00, 0x00, 0x00, 0x3a, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x74, 0x34, 0x00, 0x00, 0x03, 0x40, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x4f, 0x04 } );
    fmt::println( "done" );
}

void respond_to_state_request( midi_out &output )
{
    fmt::println( "responding to state request 0x05" );
    send( output, { 0x06, 0x78, 0x7f, 0x7f, 0x7f, 0x7f } );
    send( output, { 0x26, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x14, 0x78, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1d, 0x7b, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40 } );
    send( output, { 0x1d, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14, 0x29, 0x00, 0x00, 0x00, 0x3a, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x74, 0x34, 0x00, 0x00, 0x02, 0x40, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x4e, 0x08 } );
    send( output, { 0x26, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
}

void respond_to_query( midi_out &output )
{
    fmt::println( "responding to query 0x09" );
    send( output, { 0x26, 0x00, 0x00 } );
    send( output, { 0x0e, 0x00, 0x00, 0x01, 0x00, 0x00 } );
    send( output, { 0x0f, 0x00, 0x55, 0x49, 0x3a, 0x0a, 0x00 } );
    send( output, { 0x0f, 0x00, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x00, 0x64, 0x0a, 0x00 } );
    send( output, { 0x0f, 0x00, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x00, 0x20, 0x39, 0x0a, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x68, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x08, 0x54, 0x70, 0x03, 0x1e, 0x01, 0x08, 0x00, 0x62, 0x00, 0x02, 0x58, 0x02, 0x67, 0x02, 0x00, 0x00, 0x04, 0x26, 0x03, 0x27, 0x03, 0x6c, 0x02, 0x18, 0x00, 0x01, 0x03, 0x00, 0x00 } );
    send( output, { 0x14, 0x78, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x36, 0x16, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x1d, 0x7b, 0x74, 0x00, 0x00, 0x00, 0x00, 0x40 } );
    send( output, { 0x1d, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14, 0x29, 0x00, 0x00,  0x00, 0x3a, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x74, 0x34, 0x00, 0x00, 0x02, 0x40, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x4e, 0x08 } );
}

void handle( const std::span< unsigned char > &body, midi_out &output )
{
    const auto type = static_cast< event >( body[ 0 ] );

    switch( type )
    {
        case event::probe:
            respond_to_probe( output );
            break;

        case event::ping:
            respond_to_state_request( output );
            break;

        case event::query:
            respond_to_query( output );
            break;

        case event::start_preset:
            break;

        case event::preset:
            break;

        default:
            break;
    }
}

int main( int argc, char **argv )
{
    std::optional< midi_pair > toneprint;
    toneprint = open_in_out_pair( target_name,
        {
            .on_message = [ & ]( message &&message )
            {
                if( message.size() < preamble.size() + 2 || !std::equal( preamble.begin(), preamble.end(),  message.begin() + 1 ) )
                {
                    return;
                }

                const auto body = std::span( message.begin() + 6, message.begin() + message.size() - 1 );
                fmt::println( "toneprint: {}", to_string( body ) );
                handle( body, toneprint->output );
            },
            .on_error = [] ( auto error, const source_location& )
            {
                fmt::println( "toneprint error: {}", error );
            },
            .ignore_sysex = false,
            .ignore_timing = true,
            .ignore_sensing = true,
        }
    );

    fmt::print( "starting\n" );

    int c;
    while ((c = getchar()) != '\n' && c != EOF)
    {

    }

    fmt::print( "done\n" );
    return 0;
}
